
df <- read.csv("C:/Users/nasty/Downloads/chr-pos.csv")
View(df)

## Гистограмма по всем хромосомам - для каждого из источников
# Создание суммарной таблицы
summary_table <- df %>%
  group_by(chromosome) %>%
  summarise(across(starts_with("in"), sum))

# Построение гистограмм
for (col in colnames(summary_table)[-1]) {
  p <- ggplot(summary_table, aes(x = chromosome, y = !!as.name(col), fill = chromosome)) +
    geom_bar(stat = "identity") +
    labs(x = "Chromosome", y = "Count", fill = "Chromosome") +
    ggtitle(paste("Histogram of", col))
  
  print(p)  # Вывод графика
}



## Гистограмма для каждой уникальной переменной в chromosome
# Создание суммарной таблицы
summary_table <- df %>%
  pivot_longer(cols = c(genotek, andme, humori, ftdna, omni), names_to = "variable", values_to = "value") %>%
  group_by(chromosome, variable) %>%
  summarise(total = sum(value))

# Построение гистограммы
ggplot(summary_table, aes(x = variable, y = total, fill = variable)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ chromosome, scales = "free") +
  labs(x = "Variable", y = "Total Count", fill = "Variable") +
  ggtitle("Histograms of Total Counts for each Chromosome")




## Отдельные гистограммы для аутосом, половых хромосом и митохондриалки
# Разделение данных на две группы: chrX, chrY, chrMT и остальные
df_chr <- df %>%
  filter(chromosome %in% c("chrX", "chrY", "chrMT"))

df_other <- df %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

# Создание суммарных таблиц для каждой группы
summary_table_chr <- df_chr %>%
  pivot_longer(cols = c(genotek, andme, humori, ftdna, omni), names_to = "variable", values_to = "value") %>%
  group_by(chromosome, variable) %>%
  summarise(total = sum(value))

summary_table_other <- df_other %>%
  pivot_longer(cols = c(genotek, andme, humori, ftdna, omni), names_to = "variable", values_to = "value") %>%
  group_by(variable) %>%
  summarise(total = sum(value))

# Построение гистограмм для chrX, chrY, chrMT
p_chr <- ggplot(summary_table_chr, aes(x = variable, y = total, fill = variable)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ chromosome, scales = "free") +
  labs(x = "Variable", y = "Total Count", fill = "Variable") +
  ggtitle("Histograms of Total Counts for chrX, chrY, chrMT")
p_chr

# Построение общей гистограммы для остальных переменных
p_other <- ggplot(summary_table_other, aes(x = variable, y = total, fill = variable)) +
  geom_bar(stat = "identity") +
  labs(x = "Variable", y = "Total Count", fill = "Variable") +
  ggtitle("Histograms of Total Counts for other chromosomes")
p_other









## Создаём суммарные файлы с уникальными значениями
ag <- bind_rows(genotek, andme) %>%
  distinct()
af <- bind_rows(ftdna, andme) %>%
  distinct()
fh <- bind_rows(ftdna, humori) %>%
 distinct()
fg <- bind_rows(genotek, ftdna) %>%
  distinct()
hg <- bind_rows(genotek, humori) %>%
  distinct()
ha <- bind_rows(humori, andme) %>%
  distinct()


# Разделение суммарных данных на две группы: chrX, chrY, chrMT и остальные
ag_X <- ag %>%
  filter(chromosome %in% c("chrX"))
ag_Y <- ag %>%
  filter(chromosome %in% c("chrY"))
ag_MT <- ag %>%
  filter(chromosome %in% c("chrMT"))
ag_other <- ag %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

af_X <- af %>%
  filter(chromosome %in% c("chrX"))
af_Y <- af %>%
  filter(chromosome %in% c("chrY"))
af_MT <- af %>%
  filter(chromosome %in% c("chrMT"))
af_other <- af %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

fh_X <- fh %>%
  filter(chromosome %in% c("chrX"))
fh_Y <- fh %>%
  filter(chromosome %in% c("chrY"))
fh_MT <- fh %>%
  filter(chromosome %in% c("chrMT"))
fh_other <- fh %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

fg_X <- fg %>%
  filter(chromosome %in% c("chrX"))
fg_Y <- fg %>%
  filter(chromosome %in% c("chrY"))
fg_MT <- fg %>%
  filter(chromosome %in% c("chrMT"))
fg_other <- fg %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

hg_X <- hg %>%
  filter(chromosome %in% c("chrX"))
hg_Y <- hg %>%
  filter(chromosome %in% c("chrY"))
hg_MT <- hg %>%
  filter(chromosome %in% c("chrMT"))
hg_other <- hg %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

ha_X <- ha %>%
  filter(chromosome %in% c("chrX"))
ha_Y <- ha %>%
  filter(chromosome %in% c("chrY"))
ha_MT <- ha %>%
  filter(chromosome %in% c("chrMT"))
ha_other <- ha %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))



# Получаем информацию о суммарных файлах половых хромосом и митохондриалки в килобайтах
ag_X_info <- object.size(ag_X)/1024
af_X_info <- object.size(af_X)/1024
fh_X_info <- object.size(fh_X)/1024
fg_X_info <- object.size(fg_X)/1024
hg_X_info <- object.size(hg_X)/1024
ha_X_info <- object.size(ha_X)/1024

cat(ag_X_info, af_X_info, fh_X_info, fg_X_info, hg_X_info, ha_X_info)

ag_Y_info <- object.size(ag_Y)/1024
af_Y_info <- object.size(af_Y)/1024
fh_Y_info <- object.size(fh_Y)/1024
fg_Y_info <- object.size(fg_Y)/1024
hg_Y_info <- object.size(hg_Y)/1024
ha_Y_info <- object.size(ha_Y)/1024

cat(ag_Y_info, af_Y_info, fh_Y_info, fg_Y_info, hg_Y_info, ha_Y_info)

ag_MT_info <- object.size(ag_MT)/1024
af_MT_info <- object.size(af_MT)/1024
fh_MT_info <- object.size(fh_MT)/1024
fg_MT_info <- object.size(fg_MT)/1024
hg_MT_info <- object.size(hg_MT)/1024
ha_MT_info <- object.size(ha_MT)/1024

cat(ag_MT_info, af_MT_info, fh_MT_info, fg_MT_info, hg_MT_info, ha_MT_info)

# Получаем информацию о суммарных файлах аутосом в килобайтах
ag_aut_info <- object.size(ag_other)/1024
af_aut_info <- object.size(af_other)/1024
fh_aut_info <- object.size(fh_other)/1024
fg_aut_info <- object.size(fg_other)/1024
hg_aut_info <- object.size(hg_other)/1024
ha_aut_info <- object.size(ha_other)/1024

cat(ag_aut_info, af_aut_info, fh_aut_info, fg_aut_info, hg_aut_info, ha_aut_info)





## Создаём пересечение файлов
ag_match <- intersect(andme, genotek)
af_match <- intersect(andme, ftdna)
fh_match <- intersect(humori, ftdna)
fg_match <- intersect(ftdna, genotek)
hg_match <- intersect(humori, genotek)
ha_match <- intersect(andme, humori)


# Разделение данных о пересечениях на две группы: chrX, chrY, chrMT и остальные
ag_match_X <- ag_match %>%
  filter(chromosome %in% c("chrX"))
ag_match_Y <- ag_match %>%
  filter(chromosome %in% c("chrY"))
ag_match_MT <- ag_match %>%
  filter(chromosome %in% c("chrMT"))
ag_match_other <- ag_match %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

af_match_X <- af_match %>%
  filter(chromosome %in% c("chrX"))
af_match_Y <- af_match %>%
  filter(chromosome %in% c("chrY"))
af_match_MT <- af_match %>%
  filter(chromosome %in% c("chrMT"))
af_match_other <- af_match %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

fh_match_X <- fh_match %>%
  filter(chromosome %in% c("chrX"))
fh_match_Y <- fh_match %>%
  filter(chromosome %in% c("chrY"))
fh_match_MT <- fh_match %>%
  filter(chromosome %in% c("chrMT"))
fh_match_other <- fh_match %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

fg_match_X <- fg_match %>%
  filter(chromosome %in% c("chrX"))
fg_match_Y <- fg_match %>%
  filter(chromosome %in% c("chrY"))
fg_match_MT <- fg_match %>%
  filter(chromosome %in% c("chrMT"))
fg_match_other <- fg_match %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

hg_match_X <- hg_match %>%
  filter(chromosome %in% c("chrX"))
hg_match_Y <- hg_match %>%
  filter(chromosome %in% c("chrY"))
hg_match_MT <- hg_match %>%
  filter(chromosome %in% c("chrMT"))
hg_match_other <- hg_match %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))

ha_match_X <- ha_match %>%
  filter(chromosome %in% c("chrX"))
ha_match_Y <- ha_match %>%
  filter(chromosome %in% c("chrY"))
ha_match_MT <- ha_match %>%
  filter(chromosome %in% c("chrMT"))
ha_match_other <- ha_match %>%
  filter(!(chromosome %in% c("chrX", "chrY", "chrMT")))


# Получаем информацию о файлах пересечений половых хромосом и митохондриалки в килобайтах
ag_match_X_info <- object.size(ag_match_X)/1024
af_match_X_info <- object.size(af_match_X)/1024
fh_match_X_info <- object.size(fh_match_X)/1024
fg_match_X_info <- object.size(fg_match_X)/1024
hg_match_X_info <- object.size(hg_match_X)/1024
ha_match_X_info <- object.size(ha_match_X)/1024

cat(ag_match_X_info, af_match_X_info, fh_match_X_info, fg_match_X_info, hg_match_X_info, ha_match_X_info)


ag_match_Y_info <- object.size(ag_match_Y)/1024
af_match_Y_info <- object.size(af_match_Y)/1024
fh_match_Y_info <- object.size(fh_match_Y)/1024
fg_match_Y_info <- object.size(fg_match_Y)/1024
hg_match_Y_info <- object.size(hg_match_Y)/1024
ha_match_Y_info <- object.size(ha_match_Y)/1024

cat(ag_match_Y_info, af_match_Y_info, fh_match_Y_info, fg_match_Y_info, hg_match_Y_info, ha_match_Y_info)


ag_match_MT_info <- object.size(ag_match_MT)/1024
af_match_MT_info <- object.size(af_match_MT)/1024
fh_match_MT_info <- object.size(fh_match_MT)/1024
fg_match_MT_info <- object.size(fg_match_MT)/1024
hg_match_MT_info <- object.size(hg_match_MT)/1024
ha_match_MT_info <- object.size(ha_match_MT)/1024

cat(ag_match_MT_info, af_match_MT_info, fh_match_MT_info, fg_match_MT_info, hg_match_MT_info, ha_match_MT_info)


# Получаем информацию о файлах пересечений аутосом в килобайтах
ag_match_aut_info <- object.size(ag_match_other)/1024
af_match_aut_info <- object.size(af_match_other)/1024
fh_match_aut_info <- object.size(fh_match_other)/1024
fg_match_aut_info <- object.size(fg_match_other)/1024
hg_match_aut_info <- object.size(hg_match_other)/1024
ha_match_aut_info <- object.size(ha_match_other)/1024

cat(ag_match_aut_info, af_match_aut_info, fh_match_aut_info, fg_match_aut_info, hg_match_aut_info, ha_match_aut_info)


## Создаем 4 новые таблицы - X, Y, MT, autosom
perekritia <- c('23andme-genotek', '23andme-ftdna', 'ftdna-humori', 'ftdna-genotek', 'humori-genotek','humori-23andme')
# Создаем вектора для столбцов таблицы X
summX <- c(ag_X_info, af_X_info, fh_X_info, fg_X_info, hg_X_info, ha_X_info)
matchingX <- c(ag_match_X_info, af_match_X_info, fh_match_X_info, fg_match_X_info, hg_match_X_info, ha_match_X_info)

# Создаем вектора для столбцов таблицы Y
summY <- c(ag_Y_info, af_Y_info, fh_Y_info, fg_Y_info, hg_Y_info, ha_Y_info)
matchingY <- c(ag_match_Y_info, af_match_Y_info, fh_match_Y_info, fg_match_Y_info, hg_match_Y_info, ha_match_Y_info)

# Создаем вектора для столбцов таблицы MT
summMT <- c(ag_MT_info, af_MT_info, fh_MT_info, fg_MT_info, hg_MT_info, ha_MT_info)
matchingMT <- c(ag_match_MT_info, af_match_MT_info, fh_match_MT_info, fg_match_MT_info, hg_match_MT_info, ha_match_MT_info)

# Создаем вектора для столбцов таблицы autosom
summAUT <- c(ag_aut_info, af_aut_info, fh_aut_info, fg_aut_info, hg_aut_info, ha_aut_info)
matchingAUT <- c(ag_match_aut_info, af_match_aut_info, fh_match_aut_info, fg_match_aut_info, hg_match_aut_info, ha_match_aut_info)


df_kb <- data.frame(perekritia, summX, matchingX, summY, matchingY, summMT, matchingMT, summAUT, matchingAUT)
View(df_kb)

## Создаем 4 графика - для половых хромосом + митохондриалка и аутосом
# Для X
summary_table_X_kb <- df_kb %>%
  pivot_longer(cols = c(summX, matchingX), names_to = "variable", values_to = "value") %>%
  group_by(perekritia, variable) %>%
  summarise(total = sum(value))

pX_kb <- ggplot(summary_table_X_kb, aes(x = variable, y = total, fill = variable)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ perekritia, scales = "free") +
  labs(x = "Variable", y = "Total Count", fill = "Variable") +
  ggtitle("Histograms of Kb of unique data in total and with overlaps")
pX_kb


# Для Y
summary_table_Y_kb <- df_kb %>%
  pivot_longer(cols = c(summY, matchingY), names_to = "variable", values_to = "value") %>%
  group_by(perekritia, variable) %>%
  summarise(total = sum(value))

pY_kb <- ggplot(summary_table_Y_kb, aes(x = variable, y = total, fill = variable)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ perekritia, scales = "free") +
  labs(x = "Variable", y = "Total Count", fill = "Variable") +
  ggtitle("Histograms of Kb of unique data in total and with overlaps")
pY_kb


# Для MT
summary_table_MT_kb <- df_kb %>%
  pivot_longer(cols = c(summMT, matchingMT), names_to = "variable", values_to = "value") %>%
  group_by(perekritia, variable) %>%
  summarise(total = sum(value))

pMT_kb <- ggplot(summary_table_MT_kb, aes(x = variable, y = total, fill = variable)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ perekritia, scales = "free") +
  labs(x = "Variable", y = "Total Count", fill = "Variable") +
  ggtitle("Histograms of Kb of unique data in total and with overlaps")
pMT_kb


# Для аутосом
summary_table_AUT_kb <- df_kb %>%
  pivot_longer(cols = c(summAUT, matchingAUT), names_to = "variable", values_to = "value") %>%
  group_by(perekritia, variable) %>%
  summarise(total = sum(value))

pAUT_kb <- ggplot(summary_table_AUT_kb, aes(x = variable, y = total, fill = variable)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ perekritia, scales = "free") +
  labs(x = "Variable", y = "Total Count", fill = "Variable") +
  ggtitle("Histograms of Kb of unique data in total and with overlaps")
pAUT_kb
